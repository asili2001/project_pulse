{
  "version": 3,
  "sources": ["../../@mdxeditor/editor/dist/plugins/headings/MdastHeadingVisitor.js", "../../@mdxeditor/editor/dist/plugins/headings/index.js", "../../@mdxeditor/editor/dist/plugins/headings/LexicalHeadingVisitor.js"],
  "sourcesContent": ["import { $createHeadingNode } from \"@lexical/rich-text\";\nconst MdastHeadingVisitor = {\n  testNode: \"heading\",\n  visitNode: function({ mdastNode, actions }) {\n    actions.addAndStepInto($createHeadingNode(`h${mdastNode.depth}`));\n  }\n};\nexport {\n  MdastHeadingVisitor\n};\n", "import { coreSystem } from \"../core/index.js\";\nimport { MdastHeadingVisitor } from \"./MdastHeadingVisitor.js\";\nimport { $createHeadingNode, HeadingNode } from \"@lexical/rich-text\";\nimport { LexicalHeadingVisitor } from \"./LexicalHeadingVisitor.js\";\nimport { KEY_DOWN_COMMAND, $createParagraphNode, COMMAND_PRIORITY_LOW } from \"lexical\";\nimport { controlOrMeta } from \"../../utils/detectMac.js\";\nimport { system } from \"../../gurx/realmFactory.js\";\nimport { realmPlugin } from \"../../gurx/react.js\";\nconst FORMATTING_KEYS = [48, 49, 50, 51, 52, 53, 54];\nconst ALL_HEADING_LEVELS = [1, 2, 3, 4, 5, 6];\nconst CODE_TO_HEADING_LEVEL_MAP = {\n  49: 1,\n  50: 2,\n  51: 3,\n  52: 4,\n  53: 5,\n  54: 6\n};\nconst headingsSystem = system(\n  (r, [{ createRootEditorSubscription, convertSelectionToNode }]) => {\n    const allowedHeadingLevels = r.node(ALL_HEADING_LEVELS);\n    r.pub(createRootEditorSubscription, (theRootEditor) => {\n      return theRootEditor.registerCommand(\n        KEY_DOWN_COMMAND,\n        (event) => {\n          const { keyCode, ctrlKey, metaKey, altKey } = event;\n          if (FORMATTING_KEYS.includes(keyCode) && controlOrMeta(metaKey, ctrlKey) && altKey) {\n            event.preventDefault();\n            theRootEditor.update(() => {\n              if (keyCode === 48) {\n                r.pub(convertSelectionToNode, () => $createParagraphNode());\n              } else {\n                const allowedHeadingLevelsValues = r.getValue(allowedHeadingLevels);\n                const requestedHeadingLevel = CODE_TO_HEADING_LEVEL_MAP[keyCode];\n                if (!allowedHeadingLevelsValues.includes(requestedHeadingLevel)) {\n                  r.pub(convertSelectionToNode, () => $createHeadingNode(`h${requestedHeadingLevel}`));\n                }\n              }\n            });\n            return true;\n          }\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      );\n    });\n    return {\n      allowedHeadingLevels\n    };\n  },\n  [coreSystem]\n);\nconst [headingsPlugin, headingsPluginHooks] = realmPlugin({\n  id: \"headings\",\n  systemSpec: headingsSystem,\n  applyParamsToSystem(realm, params) {\n    realm.pubKey(\"allowedHeadingLevels\", (params == null ? void 0 : params.allowedHeadingLevels) ?? ALL_HEADING_LEVELS);\n  },\n  init: (realm) => {\n    realm.pubKey(\"addImportVisitor\", MdastHeadingVisitor);\n    realm.pubKey(\"addLexicalNode\", HeadingNode);\n    realm.pubKey(\"addExportVisitor\", LexicalHeadingVisitor);\n  }\n});\nexport {\n  headingsPlugin,\n  headingsPluginHooks,\n  headingsSystem\n};\n", "import { $isHeadingNode } from \"@lexical/rich-text\";\nconst LexicalHeadingVisitor = {\n  testLexicalNode: $isHeadingNode,\n  visitLexicalNode: ({ lexicalNode, actions }) => {\n    const depth = parseInt(lexicalNode.getTag()[1], 10);\n    actions.addAndStepInto(\"heading\", { depth });\n  }\n};\nexport {\n  LexicalHeadingVisitor\n};\n"],
  "mappings": ";;;;;;;;;;;;;AAAA,uBAAmC;AACnC,IAAM,sBAAsB;AAAA,EAC1B,UAAU;AAAA,EACV,WAAW,SAAS,EAAE,WAAW,QAAQ,GAAG;AAC1C,YAAQ,mBAAe,qCAAmB,IAAI,UAAU,KAAK,EAAE,CAAC;AAAA,EAClE;AACF;;;ACJA,IAAAA,oBAAgD;;;ACFhD,IAAAC,oBAA+B;AAC/B,IAAM,wBAAwB;AAAA,EAC5B,iBAAiB;AAAA,EACjB,kBAAkB,CAAC,EAAE,aAAa,QAAQ,MAAM;AAC9C,UAAM,QAAQ,SAAS,YAAY,OAAO,EAAE,CAAC,GAAG,EAAE;AAClD,YAAQ,eAAe,WAAW,EAAE,MAAM,CAAC;AAAA,EAC7C;AACF;;;ADHA,qBAA6E;AAI7E,IAAM,kBAAkB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACnD,IAAM,qBAAqB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC5C,IAAM,4BAA4B;AAAA,EAChC,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AACN;AACA,IAAM,iBAAiB;AAAA,EACrB,CAAC,GAAG,CAAC,EAAE,8BAA8B,uBAAuB,CAAC,MAAM;AACjE,UAAM,uBAAuB,EAAE,KAAK,kBAAkB;AACtD,MAAE,IAAI,8BAA8B,CAAC,kBAAkB;AACrD,aAAO,cAAc;AAAA,QACnB;AAAA,QACA,CAAC,UAAU;AACT,gBAAM,EAAE,SAAS,SAAS,SAAS,OAAO,IAAI;AAC9C,cAAI,gBAAgB,SAAS,OAAO,KAAK,cAAc,SAAS,OAAO,KAAK,QAAQ;AAClF,kBAAM,eAAe;AACrB,0BAAc,OAAO,MAAM;AACzB,kBAAI,YAAY,IAAI;AAClB,kBAAE,IAAI,wBAAwB,UAAM,qCAAqB,CAAC;AAAA,cAC5D,OAAO;AACL,sBAAM,6BAA6B,EAAE,SAAS,oBAAoB;AAClE,sBAAM,wBAAwB,0BAA0B,OAAO;AAC/D,oBAAI,CAAC,2BAA2B,SAAS,qBAAqB,GAAG;AAC/D,oBAAE,IAAI,wBAAwB,UAAM,sCAAmB,IAAI,qBAAqB,EAAE,CAAC;AAAA,gBACrF;AAAA,cACF;AAAA,YACF,CAAC;AACD,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA,EACA,CAAC,UAAU;AACb;AACA,IAAM,CAAC,gBAAgB,mBAAmB,IAAI,YAAY;AAAA,EACxD,IAAI;AAAA,EACJ,YAAY;AAAA,EACZ,oBAAoB,OAAO,QAAQ;AACjC,UAAM,OAAO,yBAAyB,UAAU,OAAO,SAAS,OAAO,yBAAyB,kBAAkB;AAAA,EACpH;AAAA,EACA,MAAM,CAAC,UAAU;AACf,UAAM,OAAO,oBAAoB,mBAAmB;AACpD,UAAM,OAAO,kBAAkB,6BAAW;AAC1C,UAAM,OAAO,oBAAoB,qBAAqB;AAAA,EACxD;AACF,CAAC;",
  "names": ["import_rich_text", "import_rich_text"]
}
