import {
  headingsPluginHooks
} from "./chunk-PIKNJNTI.js";
import {
  Select
} from "./chunk-K7AKMCHL.js";
import "./chunk-SC6EHYRX.js";
import "./chunk-UYAYURSS.js";
import {
  corePluginHooks,
  require_Lexical,
  require_LexicalRichText,
  useHasPlugin
} from "./chunk-I3I4FGWZ.js";
import "./chunk-77BGO3YS.js";
import "./chunk-QUL5RPXW.js";
import "./chunk-4YQ2LHX3.js";
import "./chunk-KBUAZBQ3.js";
import "./chunk-X3B7SAOS.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/@mdxeditor/editor/dist/plugins/toolbar/components/BlockTypeSelect.js
var import_rich_text = __toESM(require_LexicalRichText());
var import_lexical = __toESM(require_Lexical());
var import_react = __toESM(require_react());
var BlockTypeSelect = () => {
  const convertSelectionToNode = corePluginHooks.usePublisher("convertSelectionToNode");
  const [currentBlockType] = corePluginHooks.useEmitterValues("currentBlockType");
  const hasQuote = useHasPlugin("quote");
  const hasHeadings = useHasPlugin("headings");
  if (!hasQuote && !hasHeadings) {
    return null;
  }
  const items = [{ label: "Paragraph", value: "paragraph" }];
  if (hasQuote) {
    items.push({ label: "Quote", value: "quote" });
  }
  if (hasHeadings) {
    const [allowedHeadingLevels] = headingsPluginHooks.useEmitterValues("allowedHeadingLevels");
    items.push(...allowedHeadingLevels.map((n) => ({ label: `Heading ${n}`, value: `h${n}` })));
  }
  return import_react.default.createElement(
    Select,
    {
      value: currentBlockType,
      onChange: (blockType) => {
        switch (blockType) {
          case "quote":
            convertSelectionToNode(() => (0, import_rich_text.$createQuoteNode)());
            break;
          case "paragraph":
            convertSelectionToNode(() => (0, import_lexical.$createParagraphNode)());
            break;
          default:
            if (blockType == "")
              ;
            else if (blockType.startsWith("h")) {
              convertSelectionToNode(() => (0, import_rich_text.$createHeadingNode)(blockType));
            } else {
              throw new Error(`Unknown block type: ${blockType}`);
            }
        }
      },
      triggerTitle: "Select block type",
      placeholder: "Block type",
      items
    }
  );
};
export {
  BlockTypeSelect
};
//# sourceMappingURL=@mdxeditor_editor_plugins_toolbar_components_BlockTypeSelect.js.map
