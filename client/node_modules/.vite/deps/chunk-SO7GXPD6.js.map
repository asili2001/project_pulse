{
  "version": 3,
  "sources": ["../../@mdxeditor/editor/dist/plugins/toolbar/primitives/toolbar.js"],
  "sourcesContent": ["import * as RadixSelect from \"@radix-ui/react-select\";\nimport * as RadixToolbar from \"@radix-ui/react-toolbar\";\nimport classNames from \"classnames\";\nimport React__default from \"react\";\nimport styles from \"../../../styles/ui.module.css.js\";\nimport { TooltipWrap } from \"./TooltipWrap.js\";\nimport { SelectButtonTrigger, SelectContent, SelectItem } from \"./select.js\";\nimport { corePluginHooks } from \"../../core/index.js\";\nfunction decorateWithRef(Component, decoratedProps) {\n  return React__default.forwardRef((props, ref) => {\n    const className = classNames(decoratedProps.className, props.className);\n    return /* @__PURE__ */ React__default.createElement(Component, { ...decoratedProps, ...props, className, ref });\n  });\n}\nfunction addTooltipToChildren(Component) {\n  return ({ title, children, ...props }) => {\n    return /* @__PURE__ */ React__default.createElement(Component, { ...props }, /* @__PURE__ */ React__default.createElement(TooltipWrap, { title }, children));\n  };\n}\nconst Root = ({ readOnly, children }) => {\n  return /* @__PURE__ */ React__default.createElement(\n    RadixToolbar.Root,\n    {\n      className: classNames(styles.toolbarRoot, { [styles.readOnlyToolbarRoot]: readOnly }),\n      ...readOnly ? { tabIndex: -1 } : {}\n    },\n    children\n  );\n};\nconst Button = decorateWithRef(RadixToolbar.Button, { className: styles.toolbarButton, \"data-toolbar-item\": true });\nconst ButtonWithTooltip = addTooltipToChildren(Button);\nconst ToolbarToggleItem = decorateWithRef(RadixToolbar.ToggleItem, {\n  className: styles.toolbarToggleItem,\n  \"data-toolbar-item\": true\n});\nconst SingleToggleGroup = decorateWithRef(RadixToolbar.ToggleGroup, {\n  type: \"single\",\n  className: styles.toolbarToggleSingleGroup\n});\nconst ToggleSingleGroupWithItem = React__default.forwardRef(({ on, title, children, disabled, ...props }, forwardedRef) => {\n  return /* @__PURE__ */ React__default.createElement(\n    RadixToolbar.ToggleGroup,\n    {\n      type: \"single\",\n      className: styles.toolbarToggleSingleGroup,\n      ...props,\n      value: on ? \"on\" : \"off\",\n      ref: forwardedRef\n    },\n    /* @__PURE__ */ React__default.createElement(ToolbarToggleItem, { title, value: \"on\", disabled }, /* @__PURE__ */ React__default.createElement(TooltipWrap, { title }, children))\n  );\n});\nconst MultipleChoiceToggleGroup = ({ items }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.toolbarGroupOfGroups }, items.map((item, index) => /* @__PURE__ */ React__default.createElement(\n    ToggleSingleGroupWithItem,\n    {\n      key: index,\n      title: item.title,\n      on: item.active,\n      onValueChange: (v) => item.onChange(v === \"on\"),\n      disabled: item.disabled\n    },\n    item.contents\n  )));\n};\nconst SingleChoiceToggleGroup = ({ value, onChange, className, items }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.toolbarGroupOfGroups }, /* @__PURE__ */ React__default.createElement(\n    RadixToolbar.ToggleGroup,\n    {\n      type: \"single\",\n      className: classNames(styles.toolbarToggleSingleGroup, className),\n      onValueChange: onChange,\n      value: value || \"\",\n      onFocus: (e) => e.preventDefault()\n    },\n    items.map((item, index) => /* @__PURE__ */ React__default.createElement(ToolbarToggleItem, { key: index, value: item.value }, /* @__PURE__ */ React__default.createElement(TooltipWrap, { title: item.title }, item.contents)))\n  ));\n};\nconst ButtonOrDropdownButton = (props) => {\n  const [readOnly] = corePluginHooks.useEmitterValues(\"readOnly\");\n  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, props.items.length === 1 ? /* @__PURE__ */ React__default.createElement(ButtonWithTooltip, { title: props.title, onClick: () => props.onChoose(\"\"), disabled: readOnly }, props.children) : /* @__PURE__ */ React__default.createElement(RadixSelect.Root, { value: \"\", onValueChange: props.onChoose }, /* @__PURE__ */ React__default.createElement(SelectButtonTrigger, { title: props.title }, props.children), /* @__PURE__ */ React__default.createElement(SelectContent, { className: styles.toolbarButtonDropdownContainer }, props.items.map((item, index) => /* @__PURE__ */ React__default.createElement(SelectItem, { key: index, value: item.value }, item.label)))));\n};\nfunction isConditionalContentsOption(option) {\n  return Object.hasOwn(option, \"when\");\n}\nconst ConditionalContents = ({ options }) => {\n  const [editorInFocus] = corePluginHooks.useEmitterValues(\"editorInFocus\");\n  const contents = React__default.useMemo(() => {\n    const option = options.find((option2) => {\n      if (isConditionalContentsOption(option2)) {\n        if (option2.when(editorInFocus)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    });\n    return option ? isConditionalContentsOption(option) ? option.contents() : option.fallback() : null;\n  }, [options, editorInFocus]);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"flex\" } }, contents);\n};\nconst Separator = RadixToolbar.Separator;\nexport {\n  Button,\n  ButtonOrDropdownButton,\n  ButtonWithTooltip,\n  ConditionalContents,\n  MultipleChoiceToggleGroup,\n  Root,\n  Separator,\n  SingleChoiceToggleGroup,\n  SingleToggleGroup,\n  ToggleSingleGroupWithItem,\n  ToolbarToggleItem\n};\n"],
  "mappings": "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",
  "names": ["React__default", "classNames"]
}
