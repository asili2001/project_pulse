{
  "version": 3,
  "sources": ["../../@mdxeditor/editor/dist/plugins/toolbar/components/BlockTypeSelect.js"],
  "sourcesContent": ["import { $createHeadingNode, $createQuoteNode } from \"@lexical/rich-text\";\nimport { $createParagraphNode } from \"lexical\";\nimport React__default from \"react\";\nimport { corePluginHooks } from \"../../core/index.js\";\nimport { Select } from \"../primitives/select.js\";\nimport { headingsPluginHooks } from \"../../headings/index.js\";\nimport { useHasPlugin } from \"../../../gurx/react.js\";\nconst BlockTypeSelect = () => {\n  const convertSelectionToNode = corePluginHooks.usePublisher(\"convertSelectionToNode\");\n  const [currentBlockType] = corePluginHooks.useEmitterValues(\"currentBlockType\");\n  const hasQuote = useHasPlugin(\"quote\");\n  const hasHeadings = useHasPlugin(\"headings\");\n  if (!hasQuote && !hasHeadings) {\n    return null;\n  }\n  const items = [{ label: \"Paragraph\", value: \"paragraph\" }];\n  if (hasQuote) {\n    items.push({ label: \"Quote\", value: \"quote\" });\n  }\n  if (hasHeadings) {\n    const [allowedHeadingLevels] = headingsPluginHooks.useEmitterValues(\"allowedHeadingLevels\");\n    items.push(...allowedHeadingLevels.map((n) => ({ label: `Heading ${n}`, value: `h${n}` })));\n  }\n  return /* @__PURE__ */ React__default.createElement(\n    Select,\n    {\n      value: currentBlockType,\n      onChange: (blockType) => {\n        switch (blockType) {\n          case \"quote\":\n            convertSelectionToNode(() => $createQuoteNode());\n            break;\n          case \"paragraph\":\n            convertSelectionToNode(() => $createParagraphNode());\n            break;\n          default:\n            if (blockType == \"\")\n              ;\n            else if (blockType.startsWith(\"h\")) {\n              convertSelectionToNode(() => $createHeadingNode(blockType));\n            } else {\n              throw new Error(`Unknown block type: ${blockType}`);\n            }\n        }\n      },\n      triggerTitle: \"Select block type\",\n      placeholder: \"Block type\",\n      items\n    }\n  );\n};\nexport {\n  BlockTypeSelect\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uBAAqD;AACrD,qBAAqC;AACrC,mBAA2B;AAK3B,IAAM,kBAAkB,MAAM;AAC5B,QAAM,yBAAyB,gBAAgB,aAAa,wBAAwB;AACpF,QAAM,CAAC,gBAAgB,IAAI,gBAAgB,iBAAiB,kBAAkB;AAC9E,QAAM,WAAW,aAAa,OAAO;AACrC,QAAM,cAAc,aAAa,UAAU;AAC3C,MAAI,CAAC,YAAY,CAAC,aAAa;AAC7B,WAAO;AAAA,EACT;AACA,QAAM,QAAQ,CAAC,EAAE,OAAO,aAAa,OAAO,YAAY,CAAC;AACzD,MAAI,UAAU;AACZ,UAAM,KAAK,EAAE,OAAO,SAAS,OAAO,QAAQ,CAAC;AAAA,EAC/C;AACA,MAAI,aAAa;AACf,UAAM,CAAC,oBAAoB,IAAI,oBAAoB,iBAAiB,sBAAsB;AAC1F,UAAM,KAAK,GAAG,qBAAqB,IAAI,CAAC,OAAO,EAAE,OAAO,WAAW,CAAC,IAAI,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;AAAA,EAC5F;AACA,SAAuB,aAAAA,QAAe;AAAA,IACpC;AAAA,IACA;AAAA,MACE,OAAO;AAAA,MACP,UAAU,CAAC,cAAc;AACvB,gBAAQ,WAAW;AAAA,UACjB,KAAK;AACH,mCAAuB,UAAM,mCAAiB,CAAC;AAC/C;AAAA,UACF,KAAK;AACH,mCAAuB,UAAM,qCAAqB,CAAC;AACnD;AAAA,UACF;AACE,gBAAI,aAAa;AACf;AAAA,qBACO,UAAU,WAAW,GAAG,GAAG;AAClC,qCAAuB,UAAM,qCAAmB,SAAS,CAAC;AAAA,YAC5D,OAAO;AACL,oBAAM,IAAI,MAAM,uBAAuB,SAAS,EAAE;AAAA,YACpD;AAAA,QACJ;AAAA,MACF;AAAA,MACA,cAAc;AAAA,MACd,aAAa;AAAA,MACb;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["React__default"]
}
